#!/usr/bin/lua

local site = require 'gluon.site_config'
local util = require 'gluon.util'

local uci = require('simple-uci').cursor()


local syslog_level = uci:get('wiredigger', 'mesh_vpn', 'syslog_level') or 'verbose'


uci:section('wiredigger', 'wiredigger', 'mesh_vpn', {
	group = 'gluon-mesh-vpn',
	syslog_level = syslog_level,
	interface = 'mesh-vpn',
	mode = 'gretap',
	mtu = site.mesh_vpn.mtu,
	packet_mark = 1,
	status_socket = '/var/run/wiredigger.mesh_vpn.socket',
})
uci:delete('wiredigger', 'mesh_vpn', 'user')


local add_groups

local function add_peer(group, name, config)
	uci:section('wiredigger', 'peer', group .. '_peer_' .. name, {
		enabled = true,
		net = 'mesh_vpn',
		group = group,
		pubkey = config.pubkey,
		remoteip4 = config.remoteip4,
		endpoints = config.endpoints,
		allowedips = config.allowedips,
	})
end

local function add_group(name, config, parent)
	uci:delete('wiredigger', name)
	uci:delete_all('wiredigger', 'peer',	function(peer)
		return (peer.net == 'mesh_vpn' and peer.group == name)
	end)


	uci:section('wiredigger', 'peer_group', name, {
		enabled = true,
		net = 'mesh_vpn',
		keepalive = config.keepalive,
		cidr4 = config.cidr4,
		regkey = config.regkey,
		regip4 = config.regip4,
		parent = parent,
		peer_limit = config.limit,
	})

	if config.peers then
		for peername, peerconfig in pairs(config.peers) do
			add_peer(name, peername, peerconfig)
		end
	end

	add_groups(name, config.groups, name)
end

-- declared local above
function add_groups(prefix, groups, parent)
	if groups then
		for name, group in pairs(groups) do
			add_group(prefix .. '_' .. name, group, parent)
		end
	end
end

add_groups('mesh_vpn', site.mesh_vpn.wiredigger.groups)


uci:save('wiredigger')
